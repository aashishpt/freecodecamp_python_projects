
def evaluate(s:str)->str:
    t = s.split()
    res = ''
    
    if t[1] not in ['+','-']:
        return "Error: Operator must be '+' or '-'."
    
    try:
        t1 = int(t[0])
        t2 = int(t[2])
       
    except ValueError:
        return "Error: Numbers must only contain digits."
    
    if (t1>9999 or t2>9999):
        return "Error: Numbers cannot be more than four digits."
    
    if t[1] == '+':
        res = int((t[0])) + int((t[2]))
        return str(res)
    
    elif t[1] == '-':
        res = int(t[0]) - int(t[2])
        return str(res)
    

def arithmetic_arranger(problems:list,answers=False):
    
    if len(problems)>5:
        return "Error: Too many problems."
    # initiate empty variables needed
    first_str_list = []
    second_str_list = []
    sep_str_list = []
    ans_str_list = []


    exps = problems

    for exp in exps:
        # splits the string ['num1','operation','num2']
        exp_split = exp.split()

        # calculates the maximum length of number-string
        l = max(len(exp_split[0]),len(exp_split[2])) 
        
        ans = evaluate(exp)
        if "Error" in ans:
            if '+' in ans:
                return "Error: Operator must be '+' or '-'."
            elif 'must' in ans:
                return "Error: Numbers must only contain digits."
            else:
                return "Error: Numbers cannot be more than four digits."
        # prints first number  
        # with right justification of l+2 as calculated above 
        first_str_list.append(exp_split[0].rjust(l+2))

        # prints second number with operation symbol and blankspace 
        # with right justification of l+2 calculated above 
        second_str_list.append((exp_split[1] + " " + exp_split[2].rjust(l)))

        # prints separator line
        sep_str_list.append("-"*(l+2))

        # prints final answer with rjust l+2
        ans_str_list.append(evaluate(exp).rjust(l+2))
    
    
        first =("    ".join(first_str_list))
        second = ("    ".join(second_str_list))
        sep = ("    ".join(sep_str_list))
        ans = ("    ".join(ans_str_list))
    
        res_without_solution = first + '\n' + second + '\n' + sep
        res_with_solution = first + '\n' + second + '\n' + sep + '\n' + ans
        
        if answers == True:
            arranged_problems = res_with_solution
        else:
            arranged_problems = res_without_solution
            

    return arranged_problems